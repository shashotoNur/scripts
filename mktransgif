#!/usr/bin/env python3

try:
    from PIL import Image, ImageDraw, ImageFilter
except ImportError:
    print("Pillow is not installed.")
    print("Please install it using the following command: pip install Pillow")
    exit()

import argparse
import random
import math

def create_circular_transition_gif(before_path, after_path, output_path):
    """
    Creates a GIF where an 'after' image expands in a circular pattern
    from a random point to reveal over a 'before' image.
    The expansion starts very fast and then slows down dramatically.
    """
    num_transition_steps = 60

    frame_duration = 50 # milliseconds
    total_pause_duration = 1500 # 1.5 seconds to display each image w/o the transition

    num_pause_frames = int(total_pause_duration / frame_duration)
    power = 5 # Higher power -> more speed difference

    try:
        before_image = Image.open(before_path)
        after_image = Image.open(after_path)

        if before_image.size != after_image.size:
            after_image = after_image.resize(before_image.size)

        width, height = before_image.size

        # Generate a random center point for the circle
        center = (random.randint(0, width), random.randint(0, height))

        # Calculate the maximum possible radius
        max_radius = max(
            math.hypot(center[0], center[1]),
            math.hypot(width - center[0], center[1]),
            math.hypot(center[0], height - center[1]),
            math.hypot(width - center[0], height - center[1])
        )

        frames = []

        # 'Before' frames
        for _ in range(num_pause_frames):
            frames.append(before_image.copy())

        # Transition frames
        for i in range(num_transition_steps + 1):
            t = i / num_transition_steps

            # Function to give a fast start and a slow end
            radius = max_radius * (1 - (1 - t) ** power)

            mask = Image.new('L', (width, height), 0)
            draw = ImageDraw.Draw(mask)

            draw.ellipse((center[0] - radius, center[1] - radius,
                          center[0] + radius, center[1] + radius), fill=255)

            # Creates a soft edge for the circular transition
            blurred_mask = mask.filter(ImageFilter.GaussianBlur(radius=5))

            new_frame = before_image.copy()
            new_frame.paste(after_image, (0, 0), blurred_mask)
            frames.append(new_frame)

        # 'After' frames
        for _ in range(num_pause_frames):
            frames.append(after_image.copy())

        frames[0].save(
            output_path,
            save_all=True,
            append_images=frames[1:],
            duration=frame_duration,
            loop=0
        )
        print(f"GIF '{output_path}' created successfully!")

    except FileNotFoundError:
        print("Error: One or both of the input image files were not found. Please check the paths.")
    except Exception as e:
        print(f"An unexpected error occurred: {e}")

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Create a circular transition GIF from two images.")

    parser.add_argument("--before", required=True, help="Path to the 'before' image.")
    parser.add_argument("--after", required=True, help="Path to the 'after' image.")
    parser.add_argument("--output", required=True, help="Path to save the output GIF.")

    args = parser.parse_args()
    create_circular_transition_gif(args.before, args.after, args.output)
